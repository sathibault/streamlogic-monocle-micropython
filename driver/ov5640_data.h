/*
 * This file is part of the MicroPython for Monocle:
 *      https://github.com/Itsbrilliantlabs/monocle-micropython
 *
 * Authored by: Josuah Demangeon <me@josuah.net>
 *
 * ISC Licence
 *
 * Copyright Â© 2022 Brilliant Labs Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
 * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

// TODO: Rename tables from RGB to YUV; perhaps with a complier switch between them
// TODO: consolidate ov5640_uxga_init_tbl & ov5640_rgb565_tbl & ov5640_rgb565_tbl_1x into one for faster bootup

typedef struct {
    uint16_t addr;
    uint8_t value;
} ov5640_conf_t;

/** 4.4fps, skipping off, max 2560x1600 ISP Input Size */
const ov5640_conf_t ov5640_rgb565_tbl[] = {
    // YUV mode
    { 0x4300, 0x30 }, // YUV 422, YUYV
    { 0x501f, 0x00 }, // YUV 422

    // original code was: 1280x800, 15fps

    // input clock 24Mhz, PCLK 42Mhz
    { 0x3035, 0x41 }, // PLL DEFAULT PCLK = 41MHz
    { 0x3036, 0x69 }, // PLL
    { 0x3c07, 0x07 }, // lightmeter 1 threshold[7:0]
    { 0x3820, 0x40 }, // [2-1] flip off
    { 0x3821, 0x00 }, // [2-1] mirror off | [0] binning off

    //{ 0x3814, 0x31 }, // timing X inc: odd=3, even=1 ?
    { 0x3814, 0x11 }, // no skipping

    //{ 0x3815, 0x31 }, // timing Y inc: odd=3, even=1 ?
    { 0x3815, 0x11 }, // no skipping

    // ISP input size (0,0) to (2623,1705)
    { 0x3800, 0x00 }, // HS
    { 0x3801, 0x10 }, // HS
    { 0x3802, 0x00 }, // VS
    { 0x3803, 0x0E }, // VS
    { 0x3804, 0x0a }, // HW (HE)
    { 0x3805, 0x2f }, // HW (HE)
    { 0x3806, 0x06 }, // VH (VE)
    { 0x3807, 0xa9 }, // VH (VE)

    // Output size, 640x400 = 0x280 x 0x190
    { 0x3808, 0x02 }, // DVPHO
    { 0x3809, 0x80 }, // DVPHO
    { 0x380a, 0x01 }, // DVPVO
    { 0x380b, 0x90 }, // DVPVO

    // Total horizontal size, 1528 --> 2844 -> 2812 -> 2766 (no skipping)
    //{ 0x380c, 0x05 }, // HTS
    //{ 0x380d, 0xF8 }, // HTS
    { 0x380c, 0x0a }, // HTS
    { 0x380d, 0xfc }, // HTS

    // Total vertical size, 900 --> 1968 -> 1708 (no skipping)
    //{ 0x380e, 0x03 }, // VTS
    //{ 0x380f, 0x84 }, // VTS
    { 0x380e, 0x06 }, // VTS
    { 0x380f, 0xac }, // VTS
    { 0x3813, 0x2e }, // Timing Voffset[7:0]

    // Undocumented settings (not in Product Specification document)
    { 0x3618, 0x00 }, // undocumented? (in Linux driver 0x00 or 0x04)
    { 0x3612, 0x29 }, // undocumented? (in Linux driver 0x29 or once 0x2B)
    { 0x3709, 0x52 }, // undocumented? (in Linux driver 0x52 or 0x12)
    { 0x370c, 0x03 }, // undocumented? (in Linux driver 0x00 or 0x03)

    // AEC
    { 0x3a02, 0x02 }, // 60Hz max exposure
    { 0x3a03, 0xe0 }, // 60Hz max exposure 
    { 0x3a14, 0x02 }, // 50Hz max exposure
    { 0x3a15, 0xe0 }, // 50Hz max exposure

    // BLC
    // is it enabled or not? 0x4000 not set anywhere else; default is enabled
    // where are the other parameters?
    { 0x4004, 0x02 }, // BLC line number

    // seems JPEG-related, probably irrelevant for our purposes ?
    { 0x3002, 0x1c }, // reset JFIFO, SFIFO, JPG
    { 0x3006, 0xc3 }, // disable clock of JPEG2x, JPEG
    { 0x4713, 0x03 }, // JPEG mode 3
    { 0x4407, 0x04 }, // Quantization scale
    { 0x460b, 0x37 }, // VFIFO debug mode, not documented

    { 0x460c, 0x20 }, // DVP PCLK divider control by auto mode
    { 0x4837, 0x16 }, // MIPI global timing
    { 0x3824, 0x04 }, // PCLK manual divider (not used if "auto mode" as above)
    { 0x5001, 0xA3 }, // SDE on, scale on, UV average off, color matrix on, AWB on
    { 0x3503, 0x00 }, // AEC/AGC on (auto)
}; 

/** Configuration content for for setting the 1x zoom level. */
// Changes for 1x zoom at 15fps:
// skipping on, HS=16, VS=14, HW=2607, VH=1705, HTS=1528, VTS=900
const ov5640_conf_t ov5640_rgb565_1x_tbl[] = {
    // skipping: on
    { 0x3814, 0x31 }, // timing X inc: odd=3, even=1 ?
    { 0x3815, 0x31 }, // timing Y inc: odd=3, even=1 ?

    // ISP input size 2592x1692
    { 0x3800, 0x00 }, // HS
    { 0x3801, 0x10 }, // HS -- 16
    { 0x3802, 0x00 }, // VS
    { 0x3803, 0x0E }, // VS -- 14
    { 0x3804, 0x0a }, // HW (HE)
    { 0x3805, 0x2f }, // HW (HE) -- 0x0A2F=2607
    { 0x3806, 0x06 }, // VH (VE)
    { 0x3807, 0xa9 }, // VH (VE) -- 0x06A9=1705

    // Total horizontal size, 1528 (with skipping)
    { 0x380c, 0x05 }, // HTS
    { 0x380d, 0xF8 }, // HTS -- 0x05F8=1528
    //{ 0x380c, 0x0a }, // HTS
    //{ 0x380d, 0xfc }, // HTS

    // Total vertical size, 900 (with skipping)
    { 0x380e, 0x03 }, // VTS
    { 0x380f, 0x84 }, // VTS -- 0x0384=900
    //{ 0x380e, 0x06 }, // VTS
    //{ 0x380f, 0xac }, // VTS -- 0x06AC=1708

    // HOFFSET = 16 = 0x10
    { 0x3810, 0x00 },
    { 0x3811, 0x10 },

    // VOFFSET = 46 = 0x2E
    // pre-scaling size 2560x1600
    { 0x3812, 0x00 },
    { 0x3813, 0x2e },
}; 

/** Configuration content for for setting the 2x zoom level. */
// Changes for 2x & 4x zoom at 15fps:
// Skipping off, HS=0x0298=664, VS=0x01B5=437, HW=0x07A7=1959, VH=0x0502=1282,
// HTS, VTS no change
const ov5640_conf_t ov5640_rgb565_2x_tbl[] = {
    // Skipping: off
    { 0x3814, 0x11 }, // no skipping
    { 0x3815, 0x11 }, // no skipping

    // ISP input size 2592x1692
    { 0x3800, 0x02 }, // HS
    { 0x3801, 0x98 }, // HS -- 0x0298=664
    { 0x3802, 0x01 }, // VS
    { 0x3803, 0x90 }, // VS -- 0x0190=400
    { 0x3804, 0x07 }, // HW (HE)
    { 0x3805, 0xa7 }, // HW (HE) -- 0x07A7=1959
    { 0x3806, 0x04 }, // VH (VE)
    { 0x3807, 0xDF }, // VH (VE) -- 0x04DF=1247

    // HOFFSET = 8 = 0x08
    { 0x3810, 0x00 },
    { 0x3811, 0x08 },

    // VOFFSET = 24 = 0x18
    // pre-scaling size 1280x800
    { 0x3812, 0x00 },
    { 0x3813, 0x18 },
}; 

/** Configuration content for initializing UXGA. */
const ov5640_conf_t ov5640_uxga_init_tbl[]= 
{   
    // 24MHz input clock, 24MHz PCLK
    { 0x3008, 0x42 }, // software power down, bit[6]
    { 0x3103, 0x03 }, // system clock from PLL, bit[1]
    { 0x3017, 0xff }, // FREX, Vsync, HREF, PCLK, D[9:6] output enable
    { 0x3018, 0xff }, // D[5:0], GPIO[1:0] output enable
    { 0x3034, 0x1a }, // MIPI 10-bit
    { 0x3037, 0x13 }, // PLL root divider, bit[4], PLL pre-divider, bit[3:0]
    { 0x3108, 0x01 }, // PCLK root divider, bit[5:4], SCLK2x root divider, bit[3:2]

    // SCLK root divider, bit[1:0]
    { 0x3630, 0x36 },
    { 0x3631, 0x0e },
    { 0x3632, 0xe2 },
    { 0x3633, 0x12 },
    { 0x3621, 0xe0 },
    { 0x3704, 0xa0 },
    { 0x3703, 0x5a },
    { 0x3715, 0x78 },
    { 0x3717, 0x01 },
    { 0x370b, 0x60 },
    { 0x3705, 0x1a },
    { 0x3905, 0x02 },
    { 0x3906, 0x10 },
    { 0x3901, 0x0a },
    { 0x3731, 0x12 },
    { 0x3600, 0x08 }, // VCM control
    { 0x3601, 0x33 }, // VCM control
    { 0x302d, 0x60 }, // system control
    { 0x3620, 0x52 },
    { 0x371b, 0x20 },
    { 0x471c, 0x50 },
    { 0x3a13, 0x43 }, // pre-gain = 1.047x
    { 0x3a18, 0x00 }, // gain ceiling
    { 0x3a19, 0xf8 }, // gain ceiling = 15.5x
    { 0x3635, 0x13 },
    { 0x3636, 0x03 },
    { 0x3634, 0x40 },
    { 0x3622, 0x01 },

    // 50/60Hz detection 50/60Hz
    { 0x3c01, 0x34 }, // Band auto, bit[7]
    { 0x3c04, 0x28 }, // threshold low sum
    { 0x3c05, 0x98 }, // threshold high sum
    { 0x3c06, 0x00 }, // light meter 1 threshold[15:8]
    { 0x3c07, 0x08 }, // light meter 1 threshold[7:0]
    { 0x3c08, 0x00 }, // light meter 2 threshold[15:8]
    { 0x3c09, 0x1c }, // light meter 2 threshold[7:0]
    { 0x3c0a, 0x9c }, // sample number[15:8]
    { 0x3c0b, 0x40 }, // sample number[7:0]
    { 0x3810, 0x00 }, // Timing Hoffset[11:8]
    { 0x3811, 0x10 }, // Timing Hoffset[7:0]
    { 0x3812, 0x00 }, // Timing Voffset[10:8]
    { 0x3813, 0x04 }, // Timing Voffset[7:0]
    { 0x3708, 0x64 },
    { 0x4001, 0x02 }, // BLC start from line 2
    { 0x4005, 0x1a }, // BLC always update
    { 0x3000, 0x00 }, // enable blocks
    { 0x3004, 0xff }, // enable clocks
    { 0x300e, 0x58 }, // MIPI power down, DVP enable
    { 0x302e, 0x00 },
    { 0x4300, 0x30 }, // YUV 422, YUYV
    { 0x501f, 0x00 }, // YUV 422
    { 0x440e, 0x00 },
    { 0x5000, 0xa7 }, // Lenc on, raw gamma on, BPC on, WPC on, CIP on

    // AEC target
    { 0x3a0f, 0x30 }, // stable range in high
    { 0x3a10, 0x28 }, // stable range in low
    { 0x3a1b, 0x30 }, // stable range out high
    { 0x3a1e, 0x26 }, // stable range out low
    { 0x3a11, 0x60 }, // fast zone high
    { 0x3a1f, 0x14 }, // fast zone low

    // Lens correction
    { 0x5800, 0x23 },
    { 0x5801, 0x14 },
    { 0x5802, 0x0f },
    { 0x5803, 0x0f },
    { 0x5804, 0x12 },
    { 0x5805, 0x26 },
    { 0x5806, 0x0c },
    { 0x5807, 0x08 },
    { 0x5808, 0x05 },
    { 0x5809, 0x05 },
    { 0x580a, 0x08 },

    { 0x580b, 0x0d },
    { 0x580c, 0x08 },
    { 0x580d, 0x03 },
    { 0x580e, 0x00 },
    { 0x580f, 0x00 },
    { 0x5810, 0x03 },
    { 0x5811, 0x09 },
    { 0x5812, 0x07 },
    { 0x5813, 0x03 },
    { 0x5814, 0x00 },
    { 0x5815, 0x01 },
    { 0x5816, 0x03 },
    { 0x5817, 0x08 },
    { 0x5818, 0x0d },
    { 0x5819, 0x08 },
    { 0x581a, 0x05 },
    { 0x581b, 0x06 },
    { 0x581c, 0x08 },
    { 0x581d, 0x0e },
    { 0x581e, 0x29 },
    { 0x581f, 0x17 },
    { 0x5820, 0x11 },
    { 0x5821, 0x11 },
    { 0x5822, 0x15 },
    { 0x5823, 0x28 },
    { 0x5824, 0x46 },
    { 0x5825, 0x26 },
    { 0x5826, 0x08 },
    { 0x5827, 0x26 },
    { 0x5828, 0x64 },
    { 0x5829, 0x26 },
    { 0x582a, 0x24 },
    { 0x582b, 0x22 },
    { 0x582c, 0x24 },
    { 0x582d, 0x24 },
    { 0x582e, 0x06 },
    { 0x582f, 0x22 },
    { 0x5830, 0x40 },
    { 0x5831, 0x42 },
    { 0x5832, 0x24 },
    { 0x5833, 0x26 },
    { 0x5834, 0x24 },
    { 0x5835, 0x22 },
    { 0x5836, 0x22 },
    { 0x5837, 0x26 },
    { 0x5838, 0x44 },
    { 0x5839, 0x24 },
    { 0x583a, 0x26 },
    { 0x583b, 0x28 },
    { 0x583c, 0x42 },
    { 0x583d, 0xce }, // lenc BR offset

    // AWB
    { 0x5180, 0xff }, // AWB B block
    { 0x5181, 0xf2 }, // AWB control
    { 0x5182, 0x00 }, // [7:4] max local counter, [3:0] max fast counter
    { 0x5183, 0x14 }, // AWB advanced
    { 0x5184, 0x25 },
    { 0x5185, 0x24 },
    { 0x5186, 0x09 },
    { 0x5187, 0x09 },
    { 0x5188, 0x09 },
    { 0x5189, 0x75 },
    { 0x518a, 0x54 },
    { 0x518b, 0xe0 },
    { 0x518c, 0xb2 },
    { 0x518d, 0x42 },
    { 0x518e, 0x3d },
    { 0x518f, 0x56 },
    { 0x5190, 0x46 },
    { 0x5191, 0xf8 }, // AWB top limit
    { 0x5192, 0x04 }, // AWB bottom limit
    { 0x5193, 0x70 }, // red limit
    { 0x5194, 0xf0 }, // green limit
    { 0x5195, 0xf0 }, // blue limit
    { 0x5196, 0x03 }, // AWB control
    { 0x5197, 0x01 }, // local limit
    { 0x5198, 0x04 },
    { 0x5199, 0x12 },
    { 0x519a, 0x04 },
    { 0x519b, 0x00 },
    { 0x519c, 0x06 },
    { 0x519d, 0x82 },
    { 0x519e, 0x38 }, // AWB control

    // Gamma
    { 0x5480, 0x01 }, // Gamma bias plus on, bit[0]
    { 0x5481, 0x08 },
    { 0x5482, 0x14 },
    { 0x5483, 0x28 },
    { 0x5484, 0x51 },
    { 0x5485, 0x65 },
    { 0x5486, 0x71 },
    { 0x5487, 0x7d },
    { 0x5488, 0x87 },
    { 0x5489, 0x91 },
    { 0x548a, 0x9a },
    { 0x548b, 0xaa },
    { 0x548c, 0xb8 },
    { 0x548d, 0xcd },
    { 0x548e, 0xdd },
    { 0x548f, 0xea },
    { 0x5490, 0x1d },

    // color matrix
    { 0x5381, 0x1e }, // CMX1 for Y
    { 0x5382, 0x5b }, // CMX2 for Y
    { 0x5383, 0x08 }, // CMX3 for Y
    { 0x5384, 0x0a }, // CMX4 for U
    { 0x5385, 0x7e }, // CMX5 for U
    { 0x5386, 0x88 }, // CMX6 for U
    { 0x5387, 0x7c }, // CMX7 for V
    { 0x5388, 0x6c }, // CMX8 for V
    { 0x5389, 0x10 }, // CMX9 for V
    { 0x538a, 0x01 }, // sign[9]
    { 0x538b, 0x98 }, // sign[8:1]

    // UV adjust
    { 0x5580, 0x06 }, // saturation on, bit[1]
    { 0x5583, 0x40 },
    { 0x5584, 0x10 }, 
    { 0x5589, 0x10 },
    { 0x558a, 0x00 },
    { 0x558b, 0xf8 },
    { 0x501d, 0x40 }, // enable manual offset of contrast

    // CIP
    { 0x5300, 0x08 }, // CIP sharpen MT threshold 1
    { 0x5301, 0x30 }, // CIP sharpen MT threshold 2
    { 0x5302, 0x10 }, // CIP sharpen MT offset 1
    { 0x5303, 0x00 }, // CIP sharpen MT offset 2
    { 0x5304, 0x08 }, // CIP DNS threshold 1
    { 0x5305, 0x30 }, // CIP DNS threshold 2
    { 0x5306, 0x08 }, // CIP DNS offset 1
    { 0x5307, 0x16 }, // CIP DNS offset 2
    { 0x5309, 0x08 }, // CIP sharpen TH threshold 1
    { 0x530a, 0x30 }, // CIP sharpen TH threshold 2
    { 0x530b, 0x04 }, // CIP sharpen TH offset 1
    { 0x530c, 0x06 }, // CIP sharpen TH offset 2
    { 0x5025, 0x00 },
    { 0x3008, 0x02 }, // wake up from standby, bit[6]
    { 0x4740, 0X21 }, // VSYNC
};  

/**
 * Auto Focus Initialization, written starting at register 0x8000.
 * Datasheet Section 6.3
 */
const uint8_t ov5640_af_config_tbl[] = {
    0x02, 0x0F, 0xD6, 0x02, 0x0A, 0x39, 0xC2, 0x01, 0x22, 0x22, 0x00, 0x02, 0x0F, 0xB2, 0xE5, 0x1F, // 0x8000
    0x70, 0x72, 0xF5, 0x1E, 0xD2, 0x35, 0xFF, 0xEF, 0x25, 0xE0, 0x24, 0x4E, 0xF8, 0xE4, 0xF6, 0x08, // 0x8010
    0xF6, 0x0F, 0xBF, 0x34, 0xF2, 0x90, 0x0E, 0x93, 0xE4, 0x93, 0xFF, 0xE5, 0x4B, 0xC3, 0x9F, 0x50, // 0x8020
    0x04, 0x7F, 0x05, 0x80, 0x02, 0x7F, 0xFB, 0x78, 0xBD, 0xA6, 0x07, 0x12, 0x0F, 0x04, 0x40, 0x04, // 0x8030
    0x7F, 0x03, 0x80, 0x02, 0x7F, 0x30, 0x78, 0xBC, 0xA6, 0x07, 0xE6, 0x18, 0xF6, 0x08, 0xE6, 0x78, // 0x8040
    0xB9, 0xF6, 0x78, 0xBC, 0xE6, 0x78, 0xBA, 0xF6, 0x78, 0xBF, 0x76, 0x33, 0xE4, 0x08, 0xF6, 0x78, // 0x8050
    0xB8, 0x76, 0x01, 0x75, 0x4A, 0x02, 0x78, 0xB6, 0xF6, 0x08, 0xF6, 0x74, 0xFF, 0x78, 0xC1, 0xF6, // 0x8060
    0x08, 0xF6, 0x75, 0x1F, 0x01, 0x78, 0xBC, 0xE6, 0x75, 0xF0, 0x05, 0xA4, 0xF5, 0x4B, 0x12, 0x0A, // 0x8070
    0xFF, 0xC2, 0x37, 0x22, 0x78, 0xB8, 0xE6, 0xD3, 0x94, 0x00, 0x40, 0x02, 0x16, 0x22, 0xE5, 0x1F, // 0x8080
    0xB4, 0x05, 0x23, 0xE4, 0xF5, 0x1F, 0xC2, 0x01, 0x78, 0xB6, 0xE6, 0xFE, 0x08, 0xE6, 0xFF, 0x78, // 0x8090
    0x4E, 0xA6, 0x06, 0x08, 0xA6, 0x07, 0xA2, 0x37, 0xE4, 0x33, 0xF5, 0x3C, 0x90, 0x30, 0x28, 0xF0, // 0x80A0
    0x75, 0x1E, 0x10, 0xD2, 0x35, 0x22, 0xE5, 0x4B, 0x75, 0xF0, 0x05, 0x84, 0x78, 0xBC, 0xF6, 0x90, // 0x80B0
    0x0E, 0x8C, 0xE4, 0x93, 0xFF, 0x25, 0xE0, 0x24, 0x0A, 0xF8, 0xE6, 0xFC, 0x08, 0xE6, 0xFD, 0x78, // 0x80C0
    0xBC, 0xE6, 0x25, 0xE0, 0x24, 0x4E, 0xF8, 0xA6, 0x04, 0x08, 0xA6, 0x05, 0xEF, 0x12, 0x0F, 0x0B, // 0x80D0
    0xD3, 0x78, 0xB7, 0x96, 0xEE, 0x18, 0x96, 0x40, 0x0D, 0x78, 0xBC, 0xE6, 0x78, 0xB9, 0xF6, 0x78, // 0x80E0
    0xB6, 0xA6, 0x06, 0x08, 0xA6, 0x07, 0x90, 0x0E, 0x8C, 0xE4, 0x93, 0x12, 0x0F, 0x0B, 0xC3, 0x78, // 0x80F0
    0xC2, 0x96, 0xEE, 0x18, 0x96, 0x50, 0x0D, 0x78, 0xBC, 0xE6, 0x78, 0xBA, 0xF6, 0x78, 0xC1, 0xA6, // 0x8100
    0x06, 0x08, 0xA6, 0x07, 0x78, 0xB6, 0xE6, 0xFE, 0x08, 0xE6, 0xC3, 0x78, 0xC2, 0x96, 0xFF, 0xEE, // 0x8110
    0x18, 0x96, 0x78, 0xC3, 0xF6, 0x08, 0xA6, 0x07, 0x90, 0x0E, 0x95, 0xE4, 0x18, 0x12, 0x0E, 0xE9, // 0x8120
    0x40, 0x02, 0xD2, 0x37, 0x78, 0xBC, 0xE6, 0x08, 0x26, 0x08, 0xF6, 0xE5, 0x1F, 0x64, 0x01, 0x70, // 0x8130
    0x4A, 0xE6, 0xC3, 0x78, 0xC0, 0x12, 0x0E, 0xDF, 0x40, 0x05, 0x12, 0x0E, 0xDA, 0x40, 0x39, 0x12, // 0x8140
    0x0F, 0x02, 0x40, 0x04, 0x7F, 0xFE, 0x80, 0x02, 0x7F, 0x02, 0x78, 0xBD, 0xA6, 0x07, 0x78, 0xB9, // 0x8150
    0xE6, 0x24, 0x03, 0x78, 0xBF, 0xF6, 0x78, 0xB9, 0xE6, 0x24, 0xFD, 0x78, 0xC0, 0xF6, 0x12, 0x0F, // 0x8160
    0x02, 0x40, 0x06, 0x78, 0xC0, 0xE6, 0xFF, 0x80, 0x04, 0x78, 0xBF, 0xE6, 0xFF, 0x78, 0xBE, 0xA6, // 0x8170
    0x07, 0x75, 0x1F, 0x02, 0x78, 0xB8, 0x76, 0x01, 0x02, 0x02, 0x4A, 0xE5, 0x1F, 0x64, 0x02, 0x60, // 0x8180
    0x03, 0x02, 0x02, 0x2A, 0x78, 0xBE, 0xE6, 0xFF, 0xC3, 0x78, 0xC0, 0x12, 0x0E, 0xE0, 0x40, 0x08, // 0x8190
    0x12, 0x0E, 0xDA, 0x50, 0x03, 0x02, 0x02, 0x28, 0x12, 0x0F, 0x02, 0x40, 0x04, 0x7F, 0xFF, 0x80, // 0x81A0
    0x02, 0x7F, 0x01, 0x78, 0xBD, 0xA6, 0x07, 0x78, 0xB9, 0xE6, 0x04, 0x78, 0xBF, 0xF6, 0x78, 0xB9, // 0x81B0
    0xE6, 0x14, 0x78, 0xC0, 0xF6, 0x18, 0x12, 0x0F, 0x04, 0x40, 0x04, 0xE6, 0xFF, 0x80, 0x02, 0x7F, // 0x81C0
    0x00, 0x78, 0xBF, 0xA6, 0x07, 0xD3, 0x08, 0xE6, 0x64, 0x80, 0x94, 0x80, 0x40, 0x04, 0xE6, 0xFF, // 0x81D0
    0x80, 0x02, 0x7F, 0x00, 0x78, 0xC0, 0xA6, 0x07, 0xC3, 0x18, 0xE6, 0x64, 0x80, 0x94, 0xB3, 0x50, // 0x81E0
    0x04, 0xE6, 0xFF, 0x80, 0x02, 0x7F, 0x33, 0x78, 0xBF, 0xA6, 0x07, 0xC3, 0x08, 0xE6, 0x64, 0x80, // 0x81F0
    0x94, 0xB3, 0x50, 0x04, 0xE6, 0xFF, 0x80, 0x02, 0x7F, 0x33, 0x78, 0xC0, 0xA6, 0x07, 0x12, 0x0F, // 0x8200
    0x02, 0x40, 0x06, 0x78, 0xC0, 0xE6, 0xFF, 0x80, 0x04, 0x78, 0xBF, 0xE6, 0xFF, 0x78, 0xBE, 0xA6, // 0x8210
    0x07, 0x75, 0x1F, 0x03, 0x78, 0xB8, 0x76, 0x01, 0x80, 0x20, 0xE5, 0x1F, 0x64, 0x03, 0x70, 0x26, // 0x8220
    0x78, 0xBE, 0xE6, 0xFF, 0xC3, 0x78, 0xC0, 0x12, 0x0E, 0xE0, 0x40, 0x05, 0x12, 0x0E, 0xDA, 0x40, // 0x8230
    0x09, 0x78, 0xB9, 0xE6, 0x78, 0xBE, 0xF6, 0x75, 0x1F, 0x04, 0x78, 0xBE, 0xE6, 0x75, 0xF0, 0x05, // 0x8240
    0xA4, 0xF5, 0x4B, 0x02, 0x0A, 0xFF, 0xE5, 0x1F, 0xB4, 0x04, 0x10, 0x90, 0x0E, 0x94, 0xE4, 0x78, // 0x8250
    0xC3, 0x12, 0x0E, 0xE9, 0x40, 0x02, 0xD2, 0x37, 0x75, 0x1F, 0x05, 0x22, 0x30, 0x01, 0x03, 0x02, // 0x8260
    0x04, 0xC0, 0x30, 0x02, 0x03, 0x02, 0x04, 0xC0, 0x90, 0x51, 0xA5, 0xE0, 0x78, 0x93, 0xF6, 0xA3, // 0x8270
    0xE0, 0x08, 0xF6, 0xA3, 0xE0, 0x08, 0xF6, 0xE5, 0x1F, 0x70, 0x3C, 0x75, 0x1E, 0x20, 0xD2, 0x35, // 0x8280
    0x12, 0x0C, 0x7A, 0x78, 0x7E, 0xA6, 0x06, 0x08, 0xA6, 0x07, 0x78, 0x8B, 0xA6, 0x09, 0x18, 0x76, // 0x8290
    0x01, 0x12, 0x0C, 0x5B, 0x78, 0x4E, 0xA6, 0x06, 0x08, 0xA6, 0x07, 0x78, 0x8B, 0xE6, 0x78, 0x6E, // 0x82A0
    0xF6, 0x75, 0x1F, 0x01, 0x78, 0x93, 0xE6, 0x78, 0x90, 0xF6, 0x78, 0x94, 0xE6, 0x78, 0x91, 0xF6, // 0x82B0
    0x78, 0x95, 0xE6, 0x78, 0x92, 0xF6, 0x22, 0x79, 0x90, 0xE7, 0xD3, 0x78, 0x93, 0x96, 0x40, 0x05, // 0x82C0
    0xE7, 0x96, 0xFF, 0x80, 0x08, 0xC3, 0x79, 0x93, 0xE7, 0x78, 0x90, 0x96, 0xFF, 0x78, 0x88, 0x76, // 0x82D0
    0x00, 0x08, 0xA6, 0x07, 0x79, 0x91, 0xE7, 0xD3, 0x78, 0x94, 0x96, 0x40, 0x05, 0xE7, 0x96, 0xFF, // 0x82E0
    0x80, 0x08, 0xC3, 0x79, 0x94, 0xE7, 0x78, 0x91, 0x96, 0xFF, 0x12, 0x0C, 0x8E, 0x79, 0x92, 0xE7, // 0x82F0
    0xD3, 0x78, 0x95, 0x96, 0x40, 0x05, 0xE7, 0x96, 0xFF, 0x80, 0x08, 0xC3, 0x79, 0x95, 0xE7, 0x78, // 0x8300
    0x92, 0x96, 0xFF, 0x12, 0x0C, 0x8E, 0x12, 0x0C, 0x5B, 0x78, 0x8A, 0xE6, 0x25, 0xE0, 0x24, 0x4E, // 0x8310
    0xF8, 0xA6, 0x06, 0x08, 0xA6, 0x07, 0x78, 0x8A, 0xE6, 0x24, 0x6E, 0xF8, 0xA6, 0x09, 0x78, 0x8A, // 0x8320
    0xE6, 0x24, 0x01, 0xFF, 0xE4, 0x33, 0xFE, 0xD3, 0xEF, 0x94, 0x0F, 0xEE, 0x64, 0x80, 0x94, 0x80, // 0x8330
    0x40, 0x04, 0x7F, 0x00, 0x80, 0x05, 0x78, 0x8A, 0xE6, 0x04, 0xFF, 0x78, 0x8A, 0xA6, 0x07, 0xE5, // 0x8340
    0x1F, 0xB4, 0x01, 0x0A, 0xE6, 0x60, 0x03, 0x02, 0x04, 0xC0, 0x75, 0x1F, 0x02, 0x22, 0x12, 0x0C, // 0x8350
    0x7A, 0x78, 0x80, 0xA6, 0x06, 0x08, 0xA6, 0x07, 0x12, 0x0C, 0x7A, 0x78, 0x82, 0xA6, 0x06, 0x08, // 0x8360
    0xA6, 0x07, 0x78, 0x6E, 0xE6, 0x78, 0x8C, 0xF6, 0x78, 0x6E, 0xE6, 0x78, 0x8D, 0xF6, 0x7F, 0x01, // 0x8370
    0xEF, 0x25, 0xE0, 0x24, 0x4F, 0xF9, 0xC3, 0x78, 0x81, 0xE6, 0x97, 0x18, 0xE6, 0x19, 0x97, 0x50, // 0x8380
    0x0A, 0x12, 0x0C, 0x82, 0x78, 0x80, 0xA6, 0x04, 0x08, 0xA6, 0x05, 0x74, 0x6E, 0x2F, 0xF9, 0x78, // 0x8390
    0x8C, 0xE6, 0xC3, 0x97, 0x50, 0x08, 0x74, 0x6E, 0x2F, 0xF8, 0xE6, 0x78, 0x8C, 0xF6, 0xEF, 0x25, // 0x83A0
    0xE0, 0x24, 0x4F, 0xF9, 0xD3, 0x78, 0x83, 0xE6, 0x97, 0x18, 0xE6, 0x19, 0x97, 0x40, 0x0A, 0x12, // 0x83B0
    0x0C, 0x82, 0x78, 0x82, 0xA6, 0x04, 0x08, 0xA6, 0x05, 0x74, 0x6E, 0x2F, 0xF9, 0x78, 0x8D, 0xE6, // 0x83C0
    0xD3, 0x97, 0x40, 0x08, 0x74, 0x6E, 0x2F, 0xF8, 0xE6, 0x78, 0x8D, 0xF6, 0x0F, 0xEF, 0x64, 0x10, // 0x83D0
    0x70, 0x9E, 0xC3, 0x79, 0x81, 0xE7, 0x78, 0x83, 0x96, 0xFF, 0x19, 0xE7, 0x18, 0x96, 0x78, 0x84, // 0x83E0
    0xF6, 0x08, 0xA6, 0x07, 0xC3, 0x79, 0x8C, 0xE7, 0x78, 0x8D, 0x96, 0x08, 0xF6, 0xD3, 0x79, 0x81, // 0x83F0
    0xE7, 0x78, 0x7F, 0x96, 0x19, 0xE7, 0x18, 0x96, 0x40, 0x05, 0x09, 0xE7, 0x08, 0x80, 0x06, 0xC3, // 0x8400
    0x79, 0x7F, 0xE7, 0x78, 0x81, 0x96, 0xFF, 0x19, 0xE7, 0x18, 0x96, 0xFE, 0x78, 0x86, 0xA6, 0x06, // 0x8410
    0x08, 0xA6, 0x07, 0x79, 0x8C, 0xE7, 0xD3, 0x78, 0x8B, 0x96, 0x40, 0x05, 0xE7, 0x96, 0xFF, 0x80, // 0x8420
    0x08, 0xC3, 0x79, 0x8B, 0xE7, 0x78, 0x8C, 0x96, 0xFF, 0x78, 0x8F, 0xA6, 0x07, 0xE5, 0x1F, 0x64, // 0x8430
    0x02, 0x70, 0x69, 0x90, 0x0E, 0x91, 0x93, 0xFF, 0x18, 0xE6, 0xC3, 0x9F, 0x50, 0x72, 0x12, 0x0C, // 0x8440
    0x4A, 0x12, 0x0C, 0x2F, 0x90, 0x0E, 0x8E, 0x12, 0x0C, 0x38, 0x78, 0x80, 0x12, 0x0C, 0x6B, 0x7B, // 0x8450
    0x04, 0x12, 0x0C, 0x1D, 0xC3, 0x12, 0x06, 0x45, 0x50, 0x56, 0x90, 0x0E, 0x92, 0xE4, 0x93, 0xFF, // 0x8460
    0x78, 0x8F, 0xE6, 0x9F, 0x40, 0x02, 0x80, 0x11, 0x90, 0x0E, 0x90, 0xE4, 0x93, 0xFF, 0xD3, 0x78, // 0x8470
    0x89, 0xE6, 0x9F, 0x18, 0xE6, 0x94, 0x00, 0x40, 0x03, 0x75, 0x1F, 0x05, 0x12, 0x0C, 0x4A, 0x12, // 0x8480
    0x0C, 0x2F, 0x90, 0x0E, 0x8F, 0x12, 0x0C, 0x38, 0x78, 0x7E, 0x12, 0x0C, 0x6B, 0x7B, 0x40, 0x12, // 0x8490
    0x0C, 0x1D, 0xD3, 0x12, 0x06, 0x45, 0x40, 0x18, 0x75, 0x1F, 0x05, 0x22, 0xE5, 0x1F, 0xB4, 0x05, // 0x84A0
    0x0F, 0xD2, 0x01, 0xC2, 0x02, 0xE4, 0xF5, 0x1F, 0xF5, 0x1E, 0xD2, 0x35, 0xD2, 0x33, 0xD2, 0x36, // 0x84B0
    0x22, 0xEF, 0x8D, 0xF0, 0xA4, 0xA8, 0xF0, 0xCF, 0x8C, 0xF0, 0xA4, 0x28, 0xCE, 0x8D, 0xF0, 0xA4, // 0x84C0
    0x2E, 0xFE, 0x22, 0xBC, 0x00, 0x0B, 0xBE, 0x00, 0x29, 0xEF, 0x8D, 0xF0, 0x84, 0xFF, 0xAD, 0xF0, // 0x84D0
    0x22, 0xE4, 0xCC, 0xF8, 0x75, 0xF0, 0x08, 0xEF, 0x2F, 0xFF, 0xEE, 0x33, 0xFE, 0xEC, 0x33, 0xFC, // 0x84E0
    0xEE, 0x9D, 0xEC, 0x98, 0x40, 0x05, 0xFC, 0xEE, 0x9D, 0xFE, 0x0F, 0xD5, 0xF0, 0xE9, 0xE4, 0xCE, // 0x84F0
    0xFD, 0x22, 0xED, 0xF8, 0xF5, 0xF0, 0xEE, 0x84, 0x20, 0xD2, 0x1C, 0xFE, 0xAD, 0xF0, 0x75, 0xF0, // 0x8500
    0x08, 0xEF, 0x2F, 0xFF, 0xED, 0x33, 0xFD, 0x40, 0x07, 0x98, 0x50, 0x06, 0xD5, 0xF0, 0xF2, 0x22, // 0x8510
    0xC3, 0x98, 0xFD, 0x0F, 0xD5, 0xF0, 0xEA, 0x22, 0xE8, 0x8F, 0xF0, 0xA4, 0xCC, 0x8B, 0xF0, 0xA4, // 0x8520
    0x2C, 0xFC, 0xE9, 0x8E, 0xF0, 0xA4, 0x2C, 0xFC, 0x8A, 0xF0, 0xED, 0xA4, 0x2C, 0xFC, 0xEA, 0x8E, // 0x8530
    0xF0, 0xA4, 0xCD, 0xA8, 0xF0, 0x8B, 0xF0, 0xA4, 0x2D, 0xCC, 0x38, 0x25, 0xF0, 0xFD, 0xE9, 0x8F, // 0x8540
    0xF0, 0xA4, 0x2C, 0xCD, 0x35, 0xF0, 0xFC, 0xEB, 0x8E, 0xF0, 0xA4, 0xFE, 0xA9, 0xF0, 0xEB, 0x8F, // 0x8550
    0xF0, 0xA4, 0xCF, 0xC5, 0xF0, 0x2E, 0xCD, 0x39, 0xFE, 0xE4, 0x3C, 0xFC, 0xEA, 0xA4, 0x2D, 0xCE, // 0x8560
    0x35, 0xF0, 0xFD, 0xE4, 0x3C, 0xFC, 0x22, 0x75, 0xF0, 0x08, 0x75, 0x82, 0x00, 0xEF, 0x2F, 0xFF, // 0x8570
    0xEE, 0x33, 0xFE, 0xCD, 0x33, 0xCD, 0xCC, 0x33, 0xCC, 0xC5, 0x82, 0x33, 0xC5, 0x82, 0x9B, 0xED, // 0x8580
    0x9A, 0xEC, 0x99, 0xE5, 0x82, 0x98, 0x40, 0x0C, 0xF5, 0x82, 0xEE, 0x9B, 0xFE, 0xED, 0x9A, 0xFD, // 0x8590
    0xEC, 0x99, 0xFC, 0x0F, 0xD5, 0xF0, 0xD6, 0xE4, 0xCE, 0xFB, 0xE4, 0xCD, 0xFA, 0xE4, 0xCC, 0xF9, // 0x85A0
    0xA8, 0x82, 0x22, 0xB8, 0x00, 0xC1, 0xB9, 0x00, 0x59, 0xBA, 0x00, 0x2D, 0xEC, 0x8B, 0xF0, 0x84, // 0x85B0
    0xCF, 0xCE, 0xCD, 0xFC, 0xE5, 0xF0, 0xCB, 0xF9, 0x78, 0x18, 0xEF, 0x2F, 0xFF, 0xEE, 0x33, 0xFE, // 0x85C0
    0xED, 0x33, 0xFD, 0xEC, 0x33, 0xFC, 0xEB, 0x33, 0xFB, 0x10, 0xD7, 0x03, 0x99, 0x40, 0x04, 0xEB, // 0x85D0
    0x99, 0xFB, 0x0F, 0xD8, 0xE5, 0xE4, 0xF9, 0xFA, 0x22, 0x78, 0x18, 0xEF, 0x2F, 0xFF, 0xEE, 0x33, // 0x85E0
    0xFE, 0xED, 0x33, 0xFD, 0xEC, 0x33, 0xFC, 0xC9, 0x33, 0xC9, 0x10, 0xD7, 0x05, 0x9B, 0xE9, 0x9A, // 0x85F0
    0x40, 0x07, 0xEC, 0x9B, 0xFC, 0xE9, 0x9A, 0xF9, 0x0F, 0xD8, 0xE0, 0xE4, 0xC9, 0xFA, 0xE4, 0xCC, // 0x8600
    0xFB, 0x22, 0x75, 0xF0, 0x10, 0xEF, 0x2F, 0xFF, 0xEE, 0x33, 0xFE, 0xED, 0x33, 0xFD, 0xCC, 0x33, // 0x8610
    0xCC, 0xC8, 0x33, 0xC8, 0x10, 0xD7, 0x07, 0x9B, 0xEC, 0x9A, 0xE8, 0x99, 0x40, 0x0A, 0xED, 0x9B, // 0x8620
    0xFD, 0xEC, 0x9A, 0xFC, 0xE8, 0x99, 0xF8, 0x0F, 0xD5, 0xF0, 0xDA, 0xE4, 0xCD, 0xFB, 0xE4, 0xCC, // 0x8630
    0xFA, 0xE4, 0xC8, 0xF9, 0x22, 0xEB, 0x9F, 0xF5, 0xF0, 0xEA, 0x9E, 0x42, 0xF0, 0xE9, 0x9D, 0x42, // 0x8640
    0xF0, 0xE8, 0x9C, 0x45, 0xF0, 0x22, 0xE8, 0x60, 0x0F, 0xEC, 0xC3, 0x13, 0xFC, 0xED, 0x13, 0xFD, // 0x8650
    0xEE, 0x13, 0xFE, 0xEF, 0x13, 0xFF, 0xD8, 0xF1, 0x22, 0xE8, 0x60, 0x0F, 0xEF, 0xC3, 0x33, 0xFF, // 0x8660
    0xEE, 0x33, 0xFE, 0xED, 0x33, 0xFD, 0xEC, 0x33, 0xFC, 0xD8, 0xF1, 0x22, 0xE4, 0x93, 0xFC, 0x74, // 0x8670
    0x01, 0x93, 0xFD, 0x74, 0x02, 0x93, 0xFE, 0x74, 0x03, 0x93, 0xFF, 0x22, 0xE6, 0xFB, 0x08, 0xE6, // 0x8680
    0xF9, 0x08, 0xE6, 0xFA, 0x08, 0xE6, 0xCB, 0xF8, 0x22, 0xEC, 0xF6, 0x08, 0xED, 0xF6, 0x08, 0xEE, // 0x8690
    0xF6, 0x08, 0xEF, 0xF6, 0x22, 0xA4, 0x25, 0x82, 0xF5, 0x82, 0xE5, 0xF0, 0x35, 0x83, 0xF5, 0x83, // 0x86A0
    0x22, 0xD0, 0x83, 0xD0, 0x82, 0xF8, 0xE4, 0x93, 0x70, 0x12, 0x74, 0x01, 0x93, 0x70, 0x0D, 0xA3, // 0x86B0
    0xA3, 0x93, 0xF8, 0x74, 0x01, 0x93, 0xF5, 0x82, 0x88, 0x83, 0xE4, 0x73, 0x74, 0x02, 0x93, 0x68, // 0x86C0
    0x60, 0xEF, 0xA3, 0xA3, 0xA3, 0x80, 0xDF, 0x90, 0x38, 0x04, 0x78, 0x52, 0x12, 0x0B, 0xFD, 0x90, // 0x86D0
    0x38, 0x00, 0xE0, 0xFE, 0xA3, 0xE0, 0xFD, 0xED, 0xFF, 0xC3, 0x12, 0x0B, 0x9E, 0x90, 0x38, 0x10, // 0x86E0
    0x12, 0x0B, 0x92, 0x90, 0x38, 0x06, 0x78, 0x54, 0x12, 0x0B, 0xFD, 0x90, 0x38, 0x02, 0xE0, 0xFE, // 0x86F0
    0xA3, 0xE0, 0xFD, 0xED, 0xFF, 0xC3, 0x12, 0x0B, 0x9E, 0x90, 0x38, 0x12, 0x12, 0x0B, 0x92, 0xA3, // 0x8700
    0xE0, 0xB4, 0x31, 0x07, 0x78, 0x52, 0x79, 0x52, 0x12, 0x0C, 0x13, 0x90, 0x38, 0x14, 0xE0, 0xB4, // 0x8710
    0x71, 0x15, 0x78, 0x52, 0xE6, 0xFE, 0x08, 0xE6, 0x78, 0x02, 0xCE, 0xC3, 0x13, 0xCE, 0x13, 0xD8, // 0x8720
    0xF9, 0x79, 0x53, 0xF7, 0xEE, 0x19, 0xF7, 0x90, 0x38, 0x15, 0xE0, 0xB4, 0x31, 0x07, 0x78, 0x54, // 0x8730
    0x79, 0x54, 0x12, 0x0C, 0x13, 0x90, 0x38, 0x15, 0xE0, 0xB4, 0x71, 0x15, 0x78, 0x54, 0xE6, 0xFE, // 0x8740
    0x08, 0xE6, 0x78, 0x02, 0xCE, 0xC3, 0x13, 0xCE, 0x13, 0xD8, 0xF9, 0x79, 0x55, 0xF7, 0xEE, 0x19, // 0x8750
    0xF7, 0x79, 0x52, 0x12, 0x0B, 0xD9, 0x09, 0x12, 0x0B, 0xD9, 0xAF, 0x47, 0x12, 0x0B, 0xB2, 0xE5, // 0x8760
    0x44, 0xFB, 0x7A, 0x00, 0xFD, 0x7C, 0x00, 0x12, 0x04, 0xD3, 0x78, 0x5A, 0xA6, 0x06, 0x08, 0xA6, // 0x8770
    0x07, 0xAF, 0x45, 0x12, 0x0B, 0xB2, 0xAD, 0x03, 0x7C, 0x00, 0x12, 0x04, 0xD3, 0x78, 0x56, 0xA6, // 0x8780
    0x06, 0x08, 0xA6, 0x07, 0xAF, 0x48, 0x78, 0x54, 0x12, 0x0B, 0xB4, 0xE5, 0x43, 0xFB, 0xFD, 0x7C, // 0x8790
    0x00, 0x12, 0x04, 0xD3, 0x78, 0x5C, 0xA6, 0x06, 0x08, 0xA6, 0x07, 0xAF, 0x46, 0x7E, 0x00, 0x78, // 0x87A0
    0x54, 0x12, 0x0B, 0xB6, 0xAD, 0x03, 0x7C, 0x00, 0x12, 0x04, 0xD3, 0x78, 0x58, 0xA6, 0x06, 0x08, // 0x87B0
    0xA6, 0x07, 0xC3, 0x78, 0x5B, 0xE6, 0x94, 0x08, 0x18, 0xE6, 0x94, 0x00, 0x50, 0x05, 0x76, 0x00, // 0x87C0
    0x08, 0x76, 0x08, 0xC3, 0x78, 0x5D, 0xE6, 0x94, 0x08, 0x18, 0xE6, 0x94, 0x00, 0x50, 0x05, 0x76, // 0x87D0
    0x00, 0x08, 0x76, 0x08, 0x78, 0x5A, 0x12, 0x0B, 0xC6, 0xFF, 0xD3, 0x78, 0x57, 0xE6, 0x9F, 0x18, // 0x87E0
    0xE6, 0x9E, 0x40, 0x0E, 0x78, 0x5A, 0xE6, 0x13, 0xFE, 0x08, 0xE6, 0x78, 0x57, 0x12, 0x0C, 0x08, // 0x87F0
    0x80, 0x04, 0x7E, 0x00, 0x7F, 0x00, 0x78, 0x5E, 0x12, 0x0B, 0xBE, 0xFF, 0xD3, 0x78, 0x59, 0xE6, // 0x8800
    0x9F, 0x18, 0xE6, 0x9E, 0x40, 0x0E, 0x78, 0x5C, 0xE6, 0x13, 0xFE, 0x08, 0xE6, 0x78, 0x59, 0x12, // 0x8810
    0x0C, 0x08, 0x80, 0x04, 0x7E, 0x00, 0x7F, 0x00, 0xE4, 0xFC, 0xFD, 0x78, 0x62, 0x12, 0x06, 0x99, // 0x8820
    0x78, 0x5A, 0x12, 0x0B, 0xC6, 0x78, 0x57, 0x26, 0xFF, 0xEE, 0x18, 0x36, 0xFE, 0x78, 0x66, 0x12, // 0x8830
    0x0B, 0xBE, 0x78, 0x59, 0x26, 0xFF, 0xEE, 0x18, 0x36, 0xFE, 0xE4, 0xFC, 0xFD, 0x78, 0x6A, 0x12, // 0x8840
    0x06, 0x99, 0x12, 0x0B, 0xCE, 0x78, 0x66, 0x12, 0x06, 0x8C, 0xD3, 0x12, 0x06, 0x45, 0x40, 0x08, // 0x8850
    0x12, 0x0B, 0xCE, 0x78, 0x66, 0x12, 0x06, 0x99, 0x78, 0x54, 0x12, 0x0B, 0xD0, 0x78, 0x6A, 0x12, // 0x8860
    0x06, 0x8C, 0xD3, 0x12, 0x06, 0x45, 0x40, 0x0A, 0x78, 0x54, 0x12, 0x0B, 0xD0, 0x78, 0x6A, 0x12, // 0x8870
    0x06, 0x99, 0x78, 0x61, 0xE6, 0x90, 0x60, 0x01, 0xF0, 0x78, 0x65, 0xE6, 0xA3, 0xF0, 0x78, 0x69, // 0x8880
    0xE6, 0xA3, 0xF0, 0x78, 0x55, 0xE6, 0xA3, 0xF0, 0x7D, 0x01, 0x78, 0x61, 0x12, 0x0B, 0xE9, 0x24, // 0x8890
    0x01, 0x12, 0x0B, 0xA6, 0x78, 0x65, 0x12, 0x0B, 0xE9, 0x24, 0x02, 0x12, 0x0B, 0xA6, 0x78, 0x69, // 0x88A0
    0x12, 0x0B, 0xE9, 0x24, 0x03, 0x12, 0x0B, 0xA6, 0x78, 0x6D, 0x12, 0x0B, 0xE9, 0x24, 0x04, 0x12, // 0x88B0
    0x0B, 0xA6, 0x0D, 0xBD, 0x05, 0xD4, 0xC2, 0x0E, 0xC2, 0x06, 0x22, 0x85, 0x08, 0x41, 0x90, 0x30, // 0x88C0
    0x24, 0xE0, 0xF5, 0x3D, 0xA3, 0xE0, 0xF5, 0x3E, 0xA3, 0xE0, 0xF5, 0x3F, 0xA3, 0xE0, 0xF5, 0x40, // 0x88D0
    0xA3, 0xE0, 0xF5, 0x3C, 0xD2, 0x34, 0xE5, 0x41, 0x12, 0x06, 0xB1, 0x09, 0x31, 0x03, 0x09, 0x35, // 0x88E0
    0x04, 0x09, 0x3B, 0x05, 0x09, 0x3E, 0x06, 0x09, 0x41, 0x07, 0x09, 0x4A, 0x08, 0x09, 0x5B, 0x12, // 0x88F0
    0x09, 0x73, 0x18, 0x09, 0x89, 0x19, 0x09, 0x5E, 0x1A, 0x09, 0x6A, 0x1B, 0x09, 0xAD, 0x80, 0x09, // 0x8900
    0xB2, 0x81, 0x0A, 0x1D, 0x8F, 0x0A, 0x09, 0x90, 0x0A, 0x1D, 0x91, 0x0A, 0x1D, 0x92, 0x0A, 0x1D, // 0x8910
    0x93, 0x0A, 0x1D, 0x94, 0x0A, 0x1D, 0x98, 0x0A, 0x17, 0x9F, 0x0A, 0x1A, 0xEC, 0x00, 0x00, 0x0A, // 0x8920
    0x38, 0x12, 0x0F, 0x74, 0x22, 0x12, 0x0F, 0x74, 0xD2, 0x03, 0x22, 0xD2, 0x03, 0x22, 0xC2, 0x03, // 0x8930
    0x22, 0xA2, 0x37, 0xE4, 0x33, 0xF5, 0x3C, 0x02, 0x0A, 0x1D, 0xC2, 0x01, 0xC2, 0x02, 0xC2, 0x03, // 0x8940
    0x12, 0x0D, 0x0D, 0x75, 0x1E, 0x70, 0xD2, 0x35, 0x02, 0x0A, 0x1D, 0x02, 0x0A, 0x04, 0x85, 0x40, // 0x8950
    0x4A, 0x85, 0x3C, 0x4B, 0x12, 0x0A, 0xFF, 0x02, 0x0A, 0x1D, 0x85, 0x4A, 0x40, 0x85, 0x4B, 0x3C, // 0x8960
    0x02, 0x0A, 0x1D, 0xE4, 0xF5, 0x22, 0xF5, 0x23, 0x85, 0x40, 0x31, 0x85, 0x3F, 0x30, 0x85, 0x3E, // 0x8970
    0x2F, 0x85, 0x3D, 0x2E, 0x12, 0x0F, 0x46, 0x80, 0x1F, 0x75, 0x22, 0x00, 0x75, 0x23, 0x01, 0x74, // 0x8980
    0xFF, 0xF5, 0x2D, 0xF5, 0x2C, 0xF5, 0x2B, 0xF5, 0x2A, 0x12, 0x0F, 0x46, 0x85, 0x2D, 0x40, 0x85, // 0x8990
    0x2C, 0x3F, 0x85, 0x2B, 0x3E, 0x85, 0x2A, 0x3D, 0xE4, 0xF5, 0x3C, 0x80, 0x70, 0x12, 0x0F, 0x16, // 0x89A0
    0x80, 0x6B, 0x85, 0x3D, 0x45, 0x85, 0x3E, 0x46, 0xE5, 0x47, 0xC3, 0x13, 0xFF, 0xE5, 0x45, 0xC3, // 0x89B0
    0x9F, 0x50, 0x02, 0x8F, 0x45, 0xE5, 0x48, 0xC3, 0x13, 0xFF, 0xE5, 0x46, 0xC3, 0x9F, 0x50, 0x02, // 0x89C0
    0x8F, 0x46, 0xE5, 0x47, 0xC3, 0x13, 0xFF, 0xFD, 0xE5, 0x45, 0x2D, 0xFD, 0xE4, 0x33, 0xFC, 0xE5, // 0x89D0
    0x44, 0x12, 0x0F, 0x90, 0x40, 0x05, 0xE5, 0x44, 0x9F, 0xF5, 0x45, 0xE5, 0x48, 0xC3, 0x13, 0xFF, // 0x89E0
    0xFD, 0xE5, 0x46, 0x2D, 0xFD, 0xE4, 0x33, 0xFC, 0xE5, 0x43, 0x12, 0x0F, 0x90, 0x40, 0x05, 0xE5, // 0x89F0
    0x43, 0x9F, 0xF5, 0x46, 0x12, 0x06, 0xD7, 0x80, 0x14, 0x85, 0x40, 0x48, 0x85, 0x3F, 0x47, 0x85, // 0x8A00
    0x3E, 0x46, 0x85, 0x3D, 0x45, 0x80, 0x06, 0x02, 0x06, 0xD7, 0x12, 0x0D, 0x7E, 0x90, 0x30, 0x24, // 0x8A10
    0xE5, 0x3D, 0xF0, 0xA3, 0xE5, 0x3E, 0xF0, 0xA3, 0xE5, 0x3F, 0xF0, 0xA3, 0xE5, 0x40, 0xF0, 0xA3, // 0x8A20
    0xE5, 0x3C, 0xF0, 0x90, 0x30, 0x23, 0xE4, 0xF0, 0x22, 0xC0, 0xE0, 0xC0, 0x83, 0xC0, 0x82, 0xC0, // 0x8A30
    0xD0, 0x90, 0x3F, 0x0C, 0xE0, 0xF5, 0x32, 0xE5, 0x32, 0x30, 0xE3, 0x74, 0x30, 0x36, 0x66, 0x90, // 0x8A40
    0x60, 0x19, 0xE0, 0xF5, 0x0A, 0xA3, 0xE0, 0xF5, 0x0B, 0x90, 0x60, 0x1D, 0xE0, 0xF5, 0x14, 0xA3, // 0x8A50
    0xE0, 0xF5, 0x15, 0x90, 0x60, 0x21, 0xE0, 0xF5, 0x0C, 0xA3, 0xE0, 0xF5, 0x0D, 0x90, 0x60, 0x29, // 0x8A60
    0xE0, 0xF5, 0x0E, 0xA3, 0xE0, 0xF5, 0x0F, 0x90, 0x60, 0x31, 0xE0, 0xF5, 0x10, 0xA3, 0xE0, 0xF5, // 0x8A70
    0x11, 0x90, 0x60, 0x39, 0xE0, 0xF5, 0x12, 0xA3, 0xE0, 0xF5, 0x13, 0x30, 0x01, 0x06, 0x30, 0x33, // 0x8A80
    0x03, 0xD3, 0x80, 0x01, 0xC3, 0x92, 0x09, 0x30, 0x02, 0x06, 0x30, 0x33, 0x03, 0xD3, 0x80, 0x01, // 0x8A90
    0xC3, 0x92, 0x0A, 0x30, 0x33, 0x0C, 0x30, 0x03, 0x09, 0x20, 0x02, 0x06, 0x20, 0x01, 0x03, 0xD3, // 0x8AA0
    0x80, 0x01, 0xC3, 0x92, 0x0B, 0x90, 0x30, 0x01, 0xE0, 0x44, 0x40, 0xF0, 0xE0, 0x54, 0xBF, 0xF0, // 0x8AB0
    0xE5, 0x32, 0x30, 0xE1, 0x14, 0x30, 0x34, 0x11, 0x90, 0x30, 0x22, 0xE0, 0xF5, 0x08, 0xE4, 0xF0, // 0x8AC0
    0x30, 0x00, 0x03, 0xD3, 0x80, 0x01, 0xC3, 0x92, 0x08, 0xE5, 0x32, 0x30, 0xE5, 0x12, 0x90, 0x56, // 0x8AD0
    0xA1, 0xE0, 0xF5, 0x09, 0x30, 0x31, 0x09, 0x30, 0x05, 0x03, 0xD3, 0x80, 0x01, 0xC3, 0x92, 0x0D, // 0x8AE0
    0x90, 0x3F, 0x0C, 0xE5, 0x32, 0xF0, 0xD0, 0xD0, 0xD0, 0x82, 0xD0, 0x83, 0xD0, 0xE0, 0x32, 0x90, // 0x8AF0
    0x0E, 0x7E, 0xE4, 0x93, 0xFE, 0x74, 0x01, 0x93, 0xFF, 0xC3, 0x90, 0x0E, 0x7C, 0x74, 0x01, 0x93, // 0x8B00
    0x9F, 0xFF, 0xE4, 0x93, 0x9E, 0xFE, 0xE4, 0x8F, 0x3B, 0x8E, 0x3A, 0xF5, 0x39, 0xF5, 0x38, 0xAB, // 0x8B10
    0x3B, 0xAA, 0x3A, 0xA9, 0x39, 0xA8, 0x38, 0xAF, 0x4B, 0xFC, 0xFD, 0xFE, 0x12, 0x05, 0x28, 0x12, // 0x8B20
    0x0D, 0xE1, 0xE4, 0x7B, 0xFF, 0xFA, 0xF9, 0xF8, 0x12, 0x05, 0xB3, 0x12, 0x0D, 0xE1, 0x90, 0x0E, // 0x8B30
    0x69, 0xE4, 0x12, 0x0D, 0xF6, 0x12, 0x0D, 0xE1, 0xE4, 0x85, 0x4A, 0x37, 0xF5, 0x36, 0xF5, 0x35, // 0x8B40
    0xF5, 0x34, 0xAF, 0x37, 0xAE, 0x36, 0xAD, 0x35, 0xAC, 0x34, 0xA3, 0x12, 0x0D, 0xF6, 0x8F, 0x37, // 0x8B50
    0x8E, 0x36, 0x8D, 0x35, 0x8C, 0x34, 0xE5, 0x3B, 0x45, 0x37, 0xF5, 0x3B, 0xE5, 0x3A, 0x45, 0x36, // 0x8B60
    0xF5, 0x3A, 0xE5, 0x39, 0x45, 0x35, 0xF5, 0x39, 0xE5, 0x38, 0x45, 0x34, 0xF5, 0x38, 0xE4, 0xF5, // 0x8B70
    0x22, 0xF5, 0x23, 0x85, 0x3B, 0x31, 0x85, 0x3A, 0x30, 0x85, 0x39, 0x2F, 0x85, 0x38, 0x2E, 0x02, // 0x8B80
    0x0F, 0x46, 0xE0, 0xA3, 0xE0, 0x75, 0xF0, 0x02, 0xA4, 0xFF, 0xAE, 0xF0, 0xC3, 0x08, 0xE6, 0x9F, // 0x8B90
    0xF6, 0x18, 0xE6, 0x9E, 0xF6, 0x22, 0xFF, 0xE5, 0xF0, 0x34, 0x60, 0x8F, 0x82, 0xF5, 0x83, 0xEC, // 0x8BA0
    0xF0, 0x22, 0x78, 0x52, 0x7E, 0x00, 0xE6, 0xFC, 0x08, 0xE6, 0xFD, 0x02, 0x04, 0xC1, 0xE4, 0xFC, // 0x8BB0
    0xFD, 0x12, 0x06, 0x99, 0x78, 0x5C, 0xE6, 0xC3, 0x13, 0xFE, 0x08, 0xE6, 0x13, 0x22, 0x78, 0x52, // 0x8BC0
    0xE6, 0xFE, 0x08, 0xE6, 0xFF, 0xE4, 0xFC, 0xFD, 0x22, 0xE7, 0xC4, 0xF8, 0x54, 0xF0, 0xC8, 0x68, // 0x8BD0
    0xF7, 0x09, 0xE7, 0xC4, 0x54, 0x0F, 0x48, 0xF7, 0x22, 0xE6, 0xFC, 0xED, 0x75, 0xF0, 0x04, 0xA4, // 0x8BE0
    0x22, 0x12, 0x06, 0x7C, 0x8F, 0x48, 0x8E, 0x47, 0x8D, 0x46, 0x8C, 0x45, 0x22, 0xE0, 0xFE, 0xA3, // 0x8BF0
    0xE0, 0xFD, 0xEE, 0xF6, 0xED, 0x08, 0xF6, 0x22, 0x13, 0xFF, 0xC3, 0xE6, 0x9F, 0xFF, 0x18, 0xE6, // 0x8C00
    0x9E, 0xFE, 0x22, 0xE6, 0xC3, 0x13, 0xF7, 0x08, 0xE6, 0x13, 0x09, 0xF7, 0x22, 0xAD, 0x39, 0xAC, // 0x8C10
    0x38, 0xFA, 0xF9, 0xF8, 0x12, 0x05, 0x28, 0x8F, 0x3B, 0x8E, 0x3A, 0x8D, 0x39, 0x8C, 0x38, 0xAB, // 0x8C20
    0x37, 0xAA, 0x36, 0xA9, 0x35, 0xA8, 0x34, 0x22, 0x93, 0xFF, 0xE4, 0xFC, 0xFD, 0xFE, 0x12, 0x05, // 0x8C30
    0x28, 0x8F, 0x37, 0x8E, 0x36, 0x8D, 0x35, 0x8C, 0x34, 0x22, 0x78, 0x84, 0xE6, 0xFE, 0x08, 0xE6, // 0x8C40
    0xFF, 0xE4, 0x8F, 0x37, 0x8E, 0x36, 0xF5, 0x35, 0xF5, 0x34, 0x22, 0x90, 0x0E, 0x8C, 0xE4, 0x93, // 0x8C50
    0x25, 0xE0, 0x24, 0x0A, 0xF8, 0xE6, 0xFE, 0x08, 0xE6, 0xFF, 0x22, 0xE6, 0xFE, 0x08, 0xE6, 0xFF, // 0x8C60
    0xE4, 0x8F, 0x3B, 0x8E, 0x3A, 0xF5, 0x39, 0xF5, 0x38, 0x22, 0x78, 0x4E, 0xE6, 0xFE, 0x08, 0xE6, // 0x8C70
    0xFF, 0x22, 0xEF, 0x25, 0xE0, 0x24, 0x4E, 0xF8, 0xE6, 0xFC, 0x08, 0xE6, 0xFD, 0x22, 0x78, 0x89, // 0x8C80
    0xEF, 0x26, 0xF6, 0x18, 0xE4, 0x36, 0xF6, 0x22, 0x75, 0x89, 0x03, 0x75, 0xA8, 0x01, 0x75, 0xB8, // 0x8C90
    0x04, 0x75, 0x34, 0xFF, 0x75, 0x35, 0x0E, 0x75, 0x36, 0x15, 0x75, 0x37, 0x0D, 0x12, 0x0E, 0x9A, // 0x8CA0
    0x12, 0x00, 0x09, 0x12, 0x0F, 0x16, 0x12, 0x00, 0x06, 0xD2, 0x00, 0xD2, 0x34, 0xD2, 0xAF, 0x75, // 0x8CB0
    0x34, 0xFF, 0x75, 0x35, 0x0E, 0x75, 0x36, 0x49, 0x75, 0x37, 0x03, 0x12, 0x0E, 0x9A, 0x30, 0x08, // 0x8CC0
    0x09, 0xC2, 0x34, 0x12, 0x08, 0xCB, 0xC2, 0x08, 0xD2, 0x34, 0x30, 0x0B, 0x09, 0xC2, 0x36, 0x12, // 0x8CD0
    0x02, 0x6C, 0xC2, 0x0B, 0xD2, 0x36, 0x30, 0x09, 0x09, 0xC2, 0x36, 0x12, 0x00, 0x0E, 0xC2, 0x09, // 0x8CE0
    0xD2, 0x36, 0x30, 0x0E, 0x03, 0x12, 0x06, 0xD7, 0x30, 0x35, 0xD3, 0x90, 0x30, 0x29, 0xE5, 0x1E, // 0x8CF0
    0xF0, 0xB4, 0x10, 0x05, 0x90, 0x30, 0x23, 0xE4, 0xF0, 0xC2, 0x35, 0x80, 0xC1, 0xE4, 0xF5, 0x4B, // 0x8D00
    0x90, 0x0E, 0x7A, 0x93, 0xFF, 0xE4, 0x8F, 0x37, 0xF5, 0x36, 0xF5, 0x35, 0xF5, 0x34, 0xAF, 0x37, // 0x8D10
    0xAE, 0x36, 0xAD, 0x35, 0xAC, 0x34, 0x90, 0x0E, 0x6A, 0x12, 0x0D, 0xF6, 0x8F, 0x37, 0x8E, 0x36, // 0x8D20
    0x8D, 0x35, 0x8C, 0x34, 0x90, 0x0E, 0x72, 0x12, 0x06, 0x7C, 0xEF, 0x45, 0x37, 0xF5, 0x37, 0xEE, // 0x8D30
    0x45, 0x36, 0xF5, 0x36, 0xED, 0x45, 0x35, 0xF5, 0x35, 0xEC, 0x45, 0x34, 0xF5, 0x34, 0xE4, 0xF5, // 0x8D40
    0x22, 0xF5, 0x23, 0x85, 0x37, 0x31, 0x85, 0x36, 0x30, 0x85, 0x35, 0x2F, 0x85, 0x34, 0x2E, 0x12, // 0x8D50
    0x0F, 0x46, 0xE4, 0xF5, 0x22, 0xF5, 0x23, 0x90, 0x0E, 0x72, 0x12, 0x0D, 0xEA, 0x12, 0x0F, 0x46, // 0x8D60
    0xE4, 0xF5, 0x22, 0xF5, 0x23, 0x90, 0x0E, 0x6E, 0x12, 0x0D, 0xEA, 0x02, 0x0F, 0x46, 0xE5, 0x40, // 0x8D70
    0x24, 0xF2, 0xF5, 0x37, 0xE5, 0x3F, 0x34, 0x43, 0xF5, 0x36, 0xE5, 0x3E, 0x34, 0xA2, 0xF5, 0x35, // 0x8D80
    0xE5, 0x3D, 0x34, 0x28, 0xF5, 0x34, 0xE5, 0x37, 0xFF, 0xE4, 0xFE, 0xFD, 0xFC, 0x78, 0x18, 0x12, // 0x8D90
    0x06, 0x69, 0x8F, 0x40, 0x8E, 0x3F, 0x8D, 0x3E, 0x8C, 0x3D, 0xE5, 0x37, 0x54, 0xA0, 0xFF, 0xE5, // 0x8DA0
    0x36, 0xFE, 0xE4, 0xFD, 0xFC, 0x78, 0x07, 0x12, 0x06, 0x56, 0x78, 0x10, 0x12, 0x0F, 0x9A, 0xE4, // 0x8DB0
    0xFF, 0xFE, 0xE5, 0x35, 0xFD, 0xE4, 0xFC, 0x78, 0x0E, 0x12, 0x06, 0x56, 0x12, 0x0F, 0x9D, 0xE4, // 0x8DC0
    0xFF, 0xFE, 0xFD, 0xE5, 0x34, 0xFC, 0x78, 0x18, 0x12, 0x06, 0x56, 0x78, 0x08, 0x12, 0x0F, 0x9A, // 0x8DD0
    0x22, 0x8F, 0x3B, 0x8E, 0x3A, 0x8D, 0x39, 0x8C, 0x38, 0x22, 0x12, 0x06, 0x7C, 0x8F, 0x31, 0x8E, // 0x8DE0
    0x30, 0x8D, 0x2F, 0x8C, 0x2E, 0x22, 0x93, 0xF9, 0xF8, 0x02, 0x06, 0x69, 0x00, 0x00, 0x00, 0x00, // 0x8DF0
    0x12, 0x01, 0x17, 0x08, 0x31, 0x15, 0x53, 0x54, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x13, 0x01, // 0x8E00
    0x10, 0x01, 0x56, 0x40, 0x1A, 0x30, 0x29, 0x7E, 0x00, 0x30, 0x04, 0x20, 0xDF, 0x30, 0x05, 0x40, // 0x8E10
    0xBF, 0x50, 0x03, 0x00, 0xFD, 0x50, 0x27, 0x01, 0xFE, 0x60, 0x00, 0x11, 0x00, 0x3F, 0x05, 0x30, // 0x8E20
    0x00, 0x3F, 0x06, 0x22, 0x00, 0x3F, 0x01, 0x2A, 0x00, 0x3F, 0x02, 0x00, 0x00, 0x36, 0x06, 0x07, // 0x8E30
    0x00, 0x3F, 0x0B, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x40, 0xBF, 0x30, 0x01, 0x00, // 0x8E40
    0xBF, 0x30, 0x29, 0x70, 0x00, 0x3A, 0x00, 0x00, 0xFF, 0x3A, 0x00, 0x00, 0xFF, 0x36, 0x03, 0x36, // 0x8E50
    0x02, 0x41, 0x44, 0x58, 0x20, 0x18, 0x10, 0x0A, 0x04, 0x04, 0x00, 0x03, 0xFF, 0x64, 0x00, 0x00, // 0x8E60
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x06, 0x06, 0x00, 0x03, 0x51, 0x00, 0x7A, // 0x8E70
    0x50, 0x3C, 0x28, 0x1E, 0x10, 0x10, 0x50, 0x2D, 0x28, 0x16, 0x10, 0x10, 0x02, 0x00, 0x10, 0x0C, // 0x8E80
    0x10, 0x04, 0x0C, 0x6E, 0x06, 0x05, 0x00, 0xA5, 0x5A, 0x00, 0xAE, 0x35, 0xAF, 0x36, 0xE4, 0xFD, // 0x8E90
    0xED, 0xC3, 0x95, 0x37, 0x50, 0x33, 0x12, 0x0F, 0xE2, 0xE4, 0x93, 0xF5, 0x38, 0x74, 0x01, 0x93, // 0x8EA0
    0xF5, 0x39, 0x45, 0x38, 0x60, 0x23, 0x85, 0x39, 0x82, 0x85, 0x38, 0x83, 0xE0, 0xFC, 0x12, 0x0F, // 0x8EB0
    0xE2, 0x74, 0x03, 0x93, 0x52, 0x04, 0x12, 0x0F, 0xE2, 0x74, 0x02, 0x93, 0x42, 0x04, 0x85, 0x39, // 0x8EC0
    0x82, 0x85, 0x38, 0x83, 0xEC, 0xF0, 0x0D, 0x80, 0xC7, 0x22, 0x78, 0xBE, 0xE6, 0xD3, 0x08, 0xFF, // 0x8ED0
    0xE6, 0x64, 0x80, 0xF8, 0xEF, 0x64, 0x80, 0x98, 0x22, 0x93, 0xFF, 0x7E, 0x00, 0xE6, 0xFC, 0x08, // 0x8EE0
    0xE6, 0xFD, 0x12, 0x04, 0xC1, 0x78, 0xC1, 0xE6, 0xFC, 0x08, 0xE6, 0xFD, 0xD3, 0xEF, 0x9D, 0xEE, // 0x8EF0
    0x9C, 0x22, 0x78, 0xBD, 0xD3, 0xE6, 0x64, 0x80, 0x94, 0x80, 0x22, 0x25, 0xE0, 0x24, 0x0A, 0xF8, // 0x8F00
    0xE6, 0xFE, 0x08, 0xE6, 0xFF, 0x22, 0xE5, 0x3C, 0xD3, 0x94, 0x00, 0x40, 0x0B, 0x90, 0x0E, 0x88, // 0x8F10
    0x12, 0x0B, 0xF1, 0x90, 0x0E, 0x86, 0x80, 0x09, 0x90, 0x0E, 0x82, 0x12, 0x0B, 0xF1, 0x90, 0x0E, // 0x8F20
    0x80, 0xE4, 0x93, 0xF5, 0x44, 0xA3, 0xE4, 0x93, 0xF5, 0x43, 0xD2, 0x06, 0x30, 0x06, 0x03, 0xD3, // 0x8F30
    0x80, 0x01, 0xC3, 0x92, 0x0E, 0x22, 0xA2, 0xAF, 0x92, 0x32, 0xC2, 0xAF, 0xE5, 0x23, 0x45, 0x22, // 0x8F40
    0x90, 0x0E, 0x5D, 0x60, 0x0E, 0x12, 0x0F, 0xCB, 0xE0, 0xF5, 0x2C, 0x12, 0x0F, 0xC8, 0xE0, 0xF5, // 0x8F50
    0x2D, 0x80, 0x0C, 0x12, 0x0F, 0xCB, 0xE5, 0x30, 0xF0, 0x12, 0x0F, 0xC8, 0xE5, 0x31, 0xF0, 0xA2, // 0x8F60
    0x32, 0x92, 0xAF, 0x22, 0xD2, 0x01, 0xC2, 0x02, 0xE4, 0xF5, 0x1F, 0xF5, 0x1E, 0xD2, 0x35, 0xD2, // 0x8F70
    0x33, 0xD2, 0x36, 0xD2, 0x01, 0xC2, 0x02, 0xF5, 0x1F, 0xF5, 0x1E, 0xD2, 0x35, 0xD2, 0x33, 0x22, // 0x8F80
    0xFB, 0xD3, 0xED, 0x9B, 0x74, 0x80, 0xF8, 0x6C, 0x98, 0x22, 0x12, 0x06, 0x69, 0xE5, 0x40, 0x2F, // 0x8F90
    0xF5, 0x40, 0xE5, 0x3F, 0x3E, 0xF5, 0x3F, 0xE5, 0x3E, 0x3D, 0xF5, 0x3E, 0xE5, 0x3D, 0x3C, 0xF5, // 0x8FA0
    0x3D, 0x22, 0xC0, 0xE0, 0xC0, 0x83, 0xC0, 0x82, 0x90, 0x3F, 0x0D, 0xE0, 0xF5, 0x33, 0xE5, 0x33, // 0x8FB0
    0xF0, 0xD0, 0x82, 0xD0, 0x83, 0xD0, 0xE0, 0x32, 0x90, 0x0E, 0x5F, 0xE4, 0x93, 0xFE, 0x74, 0x01, // 0x8FC0
    0x93, 0xF5, 0x82, 0x8E, 0x83, 0x22, 0x78, 0x7F, 0xE4, 0xF6, 0xD8, 0xFD, 0x75, 0x81, 0xCD, 0x02, // 0x8FD0
    0x0C, 0x98, 0x8F, 0x82, 0x8E, 0x83, 0x75, 0xF0, 0x04, 0xED, 0x02, 0x06, 0xA5,                   // 0x8FE0
}; 
